// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// miniclo
Eigen::MatrixXd miniclo(Eigen::Map<Eigen::MatrixXd> X);
RcppExport SEXP _RcppCoDA_miniclo(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(miniclo(X));
    return rcpp_result_gen;
END_RCPP
}
// alrContrast
Eigen::MatrixXd alrContrast(int D, int d, bool inv);
RcppExport SEXP _RcppCoDA_alrContrast(SEXP DSEXP, SEXP dSEXP, SEXP invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type inv(invSEXP);
    rcpp_result_gen = Rcpp::wrap(alrContrast(D, d, inv));
    return rcpp_result_gen;
END_RCPP
}
// ilrContrast
Eigen::MatrixXd ilrContrast(int D);
RcppExport SEXP _RcppCoDA_ilrContrast(SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(ilrContrast(D));
    return rcpp_result_gen;
END_RCPP
}
// clrContrast
Eigen::MatrixXd clrContrast(int D);
RcppExport SEXP _RcppCoDA_clrContrast(SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(clrContrast(D));
    return rcpp_result_gen;
END_RCPP
}
// glr
Eigen::MatrixXd glr(Eigen::Map<Eigen::MatrixXd>& X, Eigen::Map<Eigen::MatrixXd>& V);
RcppExport SEXP _RcppCoDA_glr(SEXP XSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(glr(X, V));
    return rcpp_result_gen;
END_RCPP
}
// glrInv
Eigen::MatrixXd glrInv(Eigen::Map<Eigen::MatrixXd>& X, Eigen::Map<Eigen::MatrixXd>& V);
RcppExport SEXP _RcppCoDA_glrInv(SEXP XSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(glrInv(X, V));
    return rcpp_result_gen;
END_RCPP
}
// alr
Eigen::MatrixXd alr(Eigen::Map<Eigen::MatrixXd>& X, int d);
RcppExport SEXP _RcppCoDA_alr(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(alr(X, d));
    return rcpp_result_gen;
END_RCPP
}
// alrInv
Eigen::MatrixXd alrInv(Eigen::Map<Eigen::MatrixXd>& X, int d);
RcppExport SEXP _RcppCoDA_alrInv(SEXP XSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(alrInv(X, d));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppCoDA_miniclo", (DL_FUNC) &_RcppCoDA_miniclo, 1},
    {"_RcppCoDA_alrContrast", (DL_FUNC) &_RcppCoDA_alrContrast, 3},
    {"_RcppCoDA_ilrContrast", (DL_FUNC) &_RcppCoDA_ilrContrast, 1},
    {"_RcppCoDA_clrContrast", (DL_FUNC) &_RcppCoDA_clrContrast, 1},
    {"_RcppCoDA_glr", (DL_FUNC) &_RcppCoDA_glr, 2},
    {"_RcppCoDA_glrInv", (DL_FUNC) &_RcppCoDA_glrInv, 2},
    {"_RcppCoDA_alr", (DL_FUNC) &_RcppCoDA_alr, 2},
    {"_RcppCoDA_alrInv", (DL_FUNC) &_RcppCoDA_alrInv, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppCoDA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
